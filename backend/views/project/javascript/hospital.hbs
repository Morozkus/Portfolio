<section class="CARD">
    <div class="container card__container">
        <h1 class="main-title">Стоматологическая клиника</h1>

        <div class="piece">
            <h2 class="title" id="stack">Используемые технологии:</h2>
            <ul class="list">
                <li>HTML</li>
                <li>CSS</li>
                <li>Javascript</li>
                <li>Node JS</li>
                <li>Express JS</li>
            </ul>
        </div>

        <div class="piece">
            <h2 class="title" id="about">О проекте:</h2>
            <p class="idea">Сайт стоматологической клиники</p>
            <p>Полноценный многостраничный сайт по одной из клиник Санкт-Петербурга, сделанный для отработки изученных
                технологий</p>
        </div>

        <div class="piece">
            <h2 class="title" id="feature">Особенности:</h2>
            <ul class="list">
                <li>Маршрутизация с помощью express, роуты разделены на разные блоки: сами классы роутов, классы
                    контроллеров, классы сервиса</li>
                <li>Использован Yandex map API</li>
                <li>Использован Google Calendar API</li>
                <li>Работа с базой данных PostgreSQL</li>
                <li>Реализована аунтефикация и авторизация</li>
                <li>Использованы middleware</li>
                <li>Работа с cookie</li>
                <li>Реализован CRUD цикл для операций с пациентами</li>
                <li>Реализовано добавление и удаление для прайс-листа</li>
                <li>Использованы express-handlebars для упрощения работы с html структурой</li>
            </ul>
        </div>

        <div class="piece">
            <h2 class="title" id="realization">Реализация:</h2>
            <p>Определение базового шаблоны хедера и футера, которые будут применяться для каждой страницы</p>
            <p>Подключаем дополнительные npm пакеты для работы с базой данных (pg), работы с куки (cookie-parser),
                работы с гугл клауд (googleapis), кодирования строки (bscrypt), создания токена (jsonwebtoken)</p>
            <p>Верстаем страницы, которые будут выдаваться по нашим маршрутам</p>
            <p>Реализация router: выдаем на нужные нам страницы, при этом задав им маршруты по соответствующим методам,
                в нашем случае - GET. Ответом на запрос браузера будет файл, который мы укажем по данном эндпоинту</p>
            <p>Реализация routerCalendar: на данный запрос будет выдаваться обработанная на сервере информация с
                указанного в конфигурации гугл календаря. Информация будет поступать в виде массива дней и часов. На
                фронте при отрисовке отрисовывается таблица, на которой в случае, если передан зеленый цвет, то будет
                указано, что время свободно, в ином случае - занято</p>
            <p>Реализация routerDoctor: запрос отдаст фотографии сертификатов для заданного доктора. Доктор указывается
                на фронте</p>
            <p>Реализация routerDB: запрос возвращает на фронт данные: название услуги, отдел, стоимость</p>
            <p>Реализация routerAuth: Создаем строку с ключом (должна хранится в недоступном месте), с помощью пакета
                генерируем токен, передав в функцию ИД и роль пользователя, срок жизни токена можно менять
                самостоятельно. Класс контроллера имеет следующие методы: </p>
            <ul class="list">

                <li>Метод registration: при post запросе на поинт с этим методом создается новый пользователь с
                    указанным
                    именем и паролем. Если имя существует, то отказ. В ином случае пользователю присвавается роль --
                    User --
                    и выдается токен</li>

                <li>
                    Метод login: при запросе на поинт с этим методом необходимо указать username, password. Если что-то
                    из
                    этого не подходит, то возвращается ошибка. В ином случае - jwt токен, который попадает в куки
                </li>

            </ul>
            <p>Реализация routerList: данная группа реализует CRUD цикл для пациентов и добавление/удаление для цен
                прайс-листа. Совершить данные операции возможно только если пройдет проверка jwt ключа с помощью
                middleware, который повешен на данный роутер. Методы данного роутера:</p>
            <ul class="list">
                <li>getPacient: Метод возвращает всех пациентов из базы данных. Используется для отрисовки таблицы в
                    админке</li>
                <li>getPacientByName: Возвращает пациента исходя из имени или не возвращает никого</li>
                <li>updatePacient: Обновляет информацию о пациенте по ID пациента</li>
                <li>toDeletePacient: Удаляет пациента из базы данных исходя из ID пациента</li>
                <li>setPacient: Добавляет пациента, присваивая ID в базе данных, остальное приходит с фронта</li>

                <li>setPacient: устанавливает услугу. Ожидает на ввод: отдел, название услуги, цену услуги</li>
                <li>delPrice: удаляет услугу по названию услуги. Возвращает успешно, если услуга была удалена, иначе -
                    ошибку</li>
            </ul>

        </div>

        <div class="piece">
            <h2 class="title" id="minus">Недостатки:</h2>
            <ul class="list">
                <li>Ужасный дизайн</li>
                <li>Слабая архитектура</li>
                <li>Использование в одной части приложения функций, в другой - классов</li>
            </ul>
        </div>
    </div>
</section>